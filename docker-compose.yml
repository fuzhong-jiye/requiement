version: '3.8'
services:
  mysql:
    image: "mysql:8.0.27"
    restart: always
    hostname: "mysql.local"
    container_name: "mysql"
    ports:
      - "3306:3306"
    networks:
      local:
        aliases:
          - "mysql.local"
    command:
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --explicit_defaults_for_timestamp=true
      --lower_case_table_names=1
      --log-bin=mysql-bin
      --binlog-format=ROW
      --server_id=1
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_ROOT_HOST: ${MYSQL_ROOT_HOST}
    volumes:
      - ./data/mysql:/var/lib/mysql
    logging:
      options:
        max-size: "200k"
        max-file: "10"
  redis:
    image: "redis:alpine3.13"
    hostname: "redis.local"
    container_name: "redis"
    restart: always
    ports:
      - "6379:6379"
    networks:
      local:
        aliases:
          - "redis.local"
    logging:
      options:
        max-size: "200k"
        max-file: "10"
  zookeeper:
    image: "zookeeper:3.7.0"
    hostname: "zookeeper.local"
    container_name: "zookeeper"
    healthcheck:
      test: [ "CMD-SHELL", "zkServer.sh status" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      local:
        aliases:
          - "zookeeper.local"
    logging:
      options:
        max-size: "200k"
        max-file: "10"
  kafka:
    image: "wurstmeister/kafka:2.13-2.7.0"
    hostname: "kafka.local"
    container_name: "kafka"
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      local:
        aliases:
          - "kafka.local"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --list --zookeeper zookeeper:2181" ]
      interval: 10s
      timeout: 5s
      retries: 3
    logging:
      options:
        max-size: "200k"
        max-file: "10"
  nacos:
    image: "nacos/nacos-server:2.0.3"
    hostname: "nacos.local"
    container_name: nacos
    networks:
      local:
        aliases:
          - "nacos.local"
    volumes:
      - ./data/nacos/logs:/home/nacos/logs
      - ./config/nacos/custom.properties:/home/nacos/init.d/custom.properties
    ports:
      - "8848:8848"
    depends_on:
      - nacos-mysql
    environment:
      PREFER_HOST_MODE: ip
      MODE: standalone
      SPRING_DATASOURCE_PLATFORM: mysql
      MYSQL_SERVICE_HOST: nacos-mysql
      MYSQL_SERVICE_PORT: 3306
      MYSQL_SERVICE_USER: ${NACOS_MYSQL_USER}
      MYSQL_SERVICE_PASSWORD: ${NACOS_MYSQL_PASSWORD}
      MYSQL_SERVICE_DB_NAME: ${NACOS_MYSQL_DB_NAME}
      MYSQL_SERVICE_DB_PARAM: characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai
    logging:
      options:
        max-size: "200k"
        max-file: "10"
  nacos-mysql:
    image: nacos/nacos-mysql:8.0.16
    container_name: nacos-mysql
    hostname: nacos-mysql.local
    networks:
      local:
        aliases:
          - "nacos-mysql.local"
    volumes:
      - ./data/nacos/mysql:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_ROOT_HOST: ${MYSQL_ROOT_HOST}
      MYSQL_DATABASE: ${NACOS_MYSQL_DB_NAME}
      MYSQL_USER: ${NACOS_MYSQL_USER}
      MYSQL_PASSWORD: ${NACOS_MYSQL_PASSWORD}
    logging:
      options:
        max-size: "200k"
        max-file: "10"
  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.0
    container_name: elastic
    hostname: elastic.local
    networks:
      local:
        aliases:
          - "elastic.local"
    ports:
      - "9200:9200"
    environment:
      - "discovery.type=single-node"
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - ./data/elastic:/usr/share/elasticsearch/data
    logging:
      options:
        max-size: "200k"
        max-file: "10"
  kibana:
    image: docker.elastic.co/kibana/kibana:7.16.0
    container_name: kibana
    hostname: kibana.local
    networks:
      local:
        aliases:
          - "kibana.local"
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elastic:9200
    logging:
      options:
        max-size: "200k"
        max-file: "10"
  mongo:
    image: mongo:5.0.5
    container_name: mongo
    hostname: mongo.local
    ports:
      - "27017:27017"
    networks:
      local:
        aliases:
          - "mongo.local"
    environment:
      TZ: ${MONGO_TZ}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - "${MONGO_DIR}/data:/data/db"
      - "${MONGO_DIR}/logs:/data/logs"
      - "${MONGO_DIR}/setup:/docker-entrypoint-initdb.d"
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
  canal-server:
    image: canal/canal-server:v1.1.6
    container_name: canal-server
    hostname: canal-server.local
    networks:
      local:
        aliases:
          - "canal-server.local"
    ports:
      - "11111:11111"
    environment:
      - canal.instance.master.address=mysql:3306
      - canal.instance.dbUsername=root
      - canal.instance.dbPassword=123456
      - canal.instance.connectionCharset=UTF-8
      - canal.instance.tsdb_enable=true
      - canal.instance.gtidon=false
      - canal.instance.filter.regex=.*\\..*
      - canal.serverMode=kafka
      - canal.mq.canalBatchSize=50
      - canal.mq.canalGetTimeout=100
      - canal.mq.flatMessage=false
      - canal.mq.topic=canal
#      - canal.mq.partitionHash=.\\..*
      - canal.mq.partition=0
      - kafka.bootstrap.servers=kafka:9092
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
  auth_postgres:
    build:
      context: .
      dockerfile: Dockerfile.postgres.go-auth
    container_name: auth_postgres
    restart: always
    hostname: auth_postgres.local
    networks:
      local:
        aliases:
          - "auth_postgres.local"
    ports:
      - '5432:5432'
    volumes:
      - /data/auth_postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=postgres
      # sets the schema name, this should match the `NAMESPACE` env var set in your .env file
      - DB_NAMESPACE=auth
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
networks:
  local:
    driver: bridge